[Template]
Name=meson-gtk4
Description=Create a simple GTK 4 application
Tags=Meson;

[Input name]
Type=text
Title=Project Name
Subtitle=The name for your project which should not contain spaces
Validate=^[-\\w0-9]+$

[Input app_id]
Type=text
Title=Application ID
Subtitle=The application ID for your app such as "org.example.App"
Validate=^[a-z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9\\-]*(\\.[a-zA-Z][a-zA-Z0-9\\-]*)+$

[Input language]
Type=language
Title=Language
Subtitle=The primary programming language for the project
Choices=c;js;vala;rust;
Default=c

[Input Namespace]
Type=text
Title=Namespace
Subtitle=The namespace for the library such as "Myapp"
Validate=^[\\w]+$
Default=My

[Input license]
Type=license
Title=License
Default=GPL-3.0-or-later

[Input git]
Type=switch
Title=Version Control
Default=true


```
require GLib

def replace(string, find, with)
  GLib.strjoinv(with, GLib.strsplit(string, find, i32(0)))
end

dirname = name

ns = Namespace.mangle()
NS = ns.upper()
Ns = ns.title()
pfx = replace(ns, "_", "-")

name_ = replace(name.lower(), "-", "_")
resource_path = replace(app_id, ".", "/")
gsettings_path = replace(app_id, ".", "/")
```


```{{dirname}}/meson.options
option('development',
         type: 'boolean',
        value: false,
  description: 'If this is a development build (implies .Devel app-id suffix)')
```


```{{dirname}}/meson.build
project('{{dirname}}', '{{language.meson_id}}',
          version: '1.0.alpha',
    meson_version: '>= 1.1.0',
  default_options: ['warning_level=2', 'werror=false'],
{{if license.id}}
          license: '{{license.id}}',
{{end}}
)

{{if language.id == "c"}}
cc = meson.get_compiler('c')
{{else if language.id == "vala"}}
cc = meson.get_compiler('c')
valac = meson.get_compiler('vala')
{{end}}

gnome = import('gnome')
i18n = import('i18n')
pkg = import('pkgconfig')

app_id = '{{app_id}}'
if get_option('development')
  app_id = '@0@.Devel'.format(app_id)
endif

config_h = configuration_data()
config_h.set_quoted('APP_ID', app_id)
config_h.set_quoted('GETTEXT_PACKAGE', '{{name}}')
config_h.set_quoted('PACKAGE_VERSION', meson.project_version())
config_h.set_quoted('LOCALEDIR', join_paths(get_option('prefix'), get_option('datadir'), 'locale'))

prefix = get_option('prefix')
datadir = join_paths(prefix, get_option('datadir'))
libdir = join_paths(prefix, get_option('libdir'))

glib_req_version = '2.82'
glib_req = '>= @0@'.format(glib_req_version)
glib_dep = dependency('gio-2.0', version: glib_req)

gtk_req_version = '4.18'
gtk_req = '>= @0@'.format(gtk_req_version)
gtk_dep = dependency('gtk4', version: gtk_req)

{{if (language.id == "c") || (language.id == "vala")}}
project_c_args = []
test_c_args = [
  '-Watomic-alignment',
  '-Wcast-align',
  '-Wdeclaration-after-statement',
  '-Werror=address',
  '-Werror=array-bounds',
  '-Werror=empty-body',
  '-Werror=implicit',
  '-Werror=implicit-function-declaration',
  '-Werror=incompatible-pointer-types',
  '-Werror=init-self',
  '-Werror=int-conversion',
  '-Werror=int-to-pointer-cast',
  '-Werror=main',
  '-Werror=misleading-indentation',
  '-Werror=missing-braces',
  '-Werror=missing-include-dirs',
  '-Werror=nonnull',
  '-Werror=overflow',
  '-Werror=parenthesis',
  '-Werror=pointer-arith',
  '-Werror=pointer-to-int-cast',
  '-Werror=redundant-decls',
  '-Werror=return-type',
  '-Werror=sequence-point',
  '-Werror=shadow',
  '-Werror=strict-prototypes',
  '-Werror=trigraphs',
  '-Werror=undef',
  '-Werror=write-strings',
  '-Wformat-nonliteral',
  '-Wignored-qualifiers',
  '-Wimplicit-function-declaration',
  '-Wlogical-op',
  '-Wmissing-declarations',
  '-Wmissing-format-attribute',
  '-Wmissing-include-dirs',
  '-Wmissing-noreturn',
  '-Wnested-externs',
  '-Wno-cast-function-type',
  '-Wno-dangling-pointer',
  '-Wno-missing-field-initializers',
  '-Wno-sign-compare',
  '-Wno-unused-parameter',
  '-Wold-style-definition',
  '-Wpointer-arith',
  '-Wredundant-decls',
  '-Wstrict-prototypes',
  '-Wswitch-default',
  '-Wswitch-enum',
  '-Wtrampolines',
  '-Wundef',
  '-Wuninitialized',
  '-Wunused',
  '-fstrict-flex-arrays=3',
  '-fno-strict-aliasing',
{{if language.id == "vala"}}
  '-Wno-unused-variable',
  '-Wno-discarded-qualifiers',
{{end}}
  ['-Werror=format-security', '-Werror=format=2'],
  '-FImsvc_recommended_pragmas.h',
]
foreach arg: test_c_args
  if cc.has_multi_arguments(arg)
    project_c_args += arg
  endif
endforeach
add_project_arguments(project_c_args, language: 'c')

release_args = []
global_link_args = []
test_link_args = [
  '-Wl,-z,relro',
  '-Wl,-z,now',
  '-Wl,-z,noexecstack',
]
if not get_option('buildtype').startswith('debug')
  release_args += ['-DG_DISABLE_ASSERT', '-DG_DISABLE_CAST_CHECKS']
  test_link_args += [
    '-Wl,-Bsymbolic',
    '-fno-plt',
  ]
endif
foreach link_arg: test_link_args
  if cc.has_link_argument(link_arg)
    global_link_args += link_arg
  endif
endforeach
add_project_link_arguments(global_link_args, language: 'c')

glib_major_version = glib_req_version.split('.')[0].to_int()
glib_minor_version = glib_req_version.split('.')[1].to_int()
if glib_minor_version % 2 == 1
  glib_minor_version = glib_minor_version + 1
endif
deprecated_c_args = [
  '-DG_DISABLE_DEPRECATED',
  '-DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_@0@_@1@'.format(glib_major_version, glib_minor_version),
]

gtk_major_version = gtk_req_version.split('.')[0].to_int()
gtk_minor_version = gtk_req_version.split('.')[1].to_int()
if gtk_minor_version % 2 == 1
  gtk_minor_version = gtk_minor_version + 1
endif
deprecated_c_args = [
  '-DG_DISABLE_DEPRECATED',
  '-DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_@0@_@1@'.format(gtk_major_version, gtk_minor_version),
]

add_project_arguments('-I' + meson.project_build_root(), language: 'c')
{{end}}

subdir('data')
subdir('src')
subdir('po')

configure_file(output: 'config.h', configuration: config_h)
```

```{{dirname}}/src/meson.build
{{name_}}_sources = [
{{if language.id == "c"}}
  'main.c',
  '{{ns}}-application.c',
  '{{ns}}-window.c',
{{else if language.id == "vala"}}
  'main.vala',
  'application.vala',
  'window.vala',
{{end}}

  gnome.compile_resources('{{pfx}}-resources', '{{pfx}}.gresource.xml',
    c_name: '{{ns}}'
  ),
]

{{name_}}_headers = [
  '{{ns}}-version-macros.h',
  '{{name}}.h',
]

{{name_}}_deps = [
  glib_dep,
  gtk_dep,
{{if language.id == "vala"}}
  valac.find_library('config', dirs: meson.current_source_dir()),
{{end}}
]

{{name_}}_c_args = [
  deprecated_c_args,
  release_args,
  '-DGETTEXT_PACKAGE="@0@"'.format(meson.project_name()),
  '-DG_LOG_DOMAIN="{{Ns}}"',
]

{{name_}} = executable('{{name}}', {{name_}}_sources,
  dependencies: {{name_}}_deps,
        c_args: {{name_}}_c_args,
       install: true,
)
```

```{{dirname}}/src/{{pfx}}.gresource.xml
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/{{resource_path}}">
    <file preprocess="xml-stripblanks">{{pfx}}-window.ui</file>
  </gresource>
</gresources>
```

```{{dirname}}/src/{{pfx}}-window.ui
<?xml version="1.0" encoding="UTF-8"?>
<interface>
  <requires lib="gtk" version="4.0"/>
  <template class="{{Ns}}Window" parent="GtkApplicationWindow">
    <property name="title" translatable="yes">{{dirname}}</property>
    <property name="default-width">800</property>
    <property name="default-height">600</property>
    <child type="titlebar">
      <object class="GtkHeaderBar" id="headerbar">
        <child type="end">
          <object class="GtkMenuButton">
            <property name="menu-model">primary_menu</property>
            <property name="icon-name">open-menu-symbolic</property>
            <property name="primary">true</property>
          </object>
        </child>
      </object>
    </child>
  </template>
  <menu id="primary_menu">
  </menu>
</interface>
```

if language.id == "c"
```{{dirname}}/src/main.c
{{include "license.c"}}

#include "config.h"

#include <glib/gi18n.h>

#include <locale.h>

#include "{{ns}}-application.h"

int
main (int   argc,
      char *argv[])
{
  g_autoptr({{Ns}}Application) app = NULL;
  int ret;

  setlocale (LC_ALL, "");
  bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
  bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
  textdomain (GETTEXT_PACKAGE);

  g_set_prgname ("{{name}}");
  g_set_application_name (_("{{dirname}}"));

  app = {{ns}}_application_new ();
  ret = g_application_run (G_APPLICATION (app), argc, argv);

  return ret;
}
```
```{{dirname}}/src/{{pfx}}-application.c
{{include "license.c"}}

#include "config.h"

#include "{{pfx}}-application.h"
#include "{{pfx}}-window.h"

struct _{{Ns}}Application
{
  GtkApplication parent_instance;
};

G_DEFINE_FINAL_TYPE ({{Ns}}Application, {{ns}}_application, GTK_TYPE_APPLICATION)

static void
{{ns}}_application_activate (GApplication *app)
{
  GtkWindow *window;

  if (!(window = gtk_application_get_active_window (GTK_APPLICATION (app))))
    window = GTK_WINDOW ({{ns}}_window_new ({{NS}}_APPLICATION (app)));

  gtk_window_present (window);
}

static void
{{ns}}_application_startup (GApplication *app)
{
  G_APPLICATION_CLASS ({{ns}}_application_parent_class)->startup (app);
}

static void
{{ns}}_application_class_init ({{Ns}}ApplicationClass *klass)
{
  GApplicationClass *app_class = G_APPLICATION_CLASS (klass);

  app_class->activate = {{ns}}_application_activate;
  app_class->startup = {{ns}}_application_startup;
}

static void
{{ns}}_application_init ({{Ns}}Application *self)
{
}

{{Ns}}Application *
{{ns}}_application_new (void)
{
  return g_object_new ({{NS}}_TYPE_APPLICATION,
                       "application-id", APP_ID,
                       "flags", G_APPLICATION_DEFAULT_FLAGS,
                       "resource-base-path", "/{{resource_path}}",
                       NULL);
}
```
```{{dirname}}/src/{{pfx}}-application.h
{{include "license.h"}}

#pragma once

#include <gtk/gtk.h>

G_BEGIN_DECLS

#define {{NS}}_TYPE_APPLICATION ({{ns}}_application_get_type())

G_DECLARE_FINAL_TYPE ({{Ns}}Application, {{ns}}_application, {{NS}}, APPLICATION, GtkApplication)

{{Ns}}Application *{{ns}}_application_new (void);

G_END_DECLS
```
```{{dirname}}/src/{{pfx}}-window.h
{{include "license.h"}}

#pragma once

#include <gtk/gtk.h>

#include "{{pfx}}-application.h"

G_BEGIN_DECLS

#define {{NS}}_TYPE_WINDOW ({{ns}}_window_get_type())

G_DECLARE_FINAL_TYPE ({{Ns}}Window, {{ns}}_window, {{NS}}, WINDOW, GtkApplicationWindow)

GtkWidget *{{ns}}_window_new ({{Ns}}Application *app);

G_END_DECLS
```
```{{dirname}}/src/{{pfx}}-window.c
{{include "license.c"}}

#include "config.h"

#include "{{pfx}}-window.h"

struct _{{Ns}}Window
{
  GtkApplicationWindow parent_instance;
};

G_DEFINE_FINAL_TYPE ({{Ns}}Window, {{ns}}_window, GTK_TYPE_APPLICATION_WINDOW)

static void
{{ns}}_window_class_init ({{Ns}}WindowClass *klass)
{
  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);

  gtk_widget_class_set_template_from_resource (widget_class, "/{{resource_path}}/{{pfx}}-window.ui");
}

static void
{{ns}}_window_init ({{Ns}}Window *self)
{
  gtk_widget_init_template (GTK_WIDGET (self));
}

GtkWidget *
{{ns}}_window_new ({{Ns}}Application *app)
{
  g_return_val_if_fail ({{NS}}_IS_APPLICATION (app), NULL);

  return g_object_new ({{NS}}_TYPE_WINDOW,
                       "application", app,
                       NULL);
}
```
end

if language.id == "vala"
```{{dirname}}/src/main.vala
{{include "license.vala"}}

int main (string[] args) {
    Intl.bindtextdomain (Config.GETTEXT_PACKAGE, Config.LOCALEDIR);
    Intl.bind_textdomain_codeset (Config.GETTEXT_PACKAGE, "UTF-8");
    Intl.textdomain (Config.GETTEXT_PACKAGE);

    var app = new {{Ns}}.Application ();
    return app.run (args);
}
```
```{{dirname}}/src/config.vapi
[CCode (cprefix = "", lower_case_cprefix = "", cheader_filename = "config.h")]
namespace Config {
    public const string APP_ID;
    public const string GETTEXT_PACKAGE;
    public const string LOCALEDIR;
    public const string PACKAGE_VERSION;
}
```
```{{dirname}}/src/window.vala
{{include "license.vala"}}

[GtkTemplate (ui = "/{{resource_path}}/{{ns}}-window.ui")]
public class {{Ns}}.Window : Gtk.ApplicationWindow {
    public Window ({{Ns}}.Application app) {
        Object (application: app);
    }
}
```
```{{dirname}}/src/application.vala
{{include "license.vala"}}

public class {{Ns}}.Application : Gtk.Application {
    public Application () {
        Object (
            application_id: Config.APP_ID,
            flags: ApplicationFlags.DEFAULT_FLAGS,
            resource_base_path: "/{{resource_path}}/"
        );
    }

    public override void activate () {
        var window = this.active_window;

        if (window == null) {
            window = new {{Ns}}.Window (this);
        }

        window.present ();
    }
}
```
end

```{{dirname}}/README.md
# {{name}}

A GTK application to ...
```

```{{dirname}}/LICENSE
{{license.text}}
```

```{{dirname}}/po/LINGUAS
```

```{{dirname}}/po/POTFILES.in
# List of source files containing translatable strings.
# Please keep this file sorted alphabetically.
```

```{{dirname}}/po/meson.build
i18n.gettext('{{dirname}}', preset: 'glib')
```

```{{dirname}}/data/meson.build
desktop_file_in_config = configuration_data()
desktop_file_in_config.set('app_id', app_id)
desktop_file_in = configure_file(
          input: '{{name}}.desktop.in.in',
         output: '@0@.desktop.in'.format(app_id),
  configuration: desktop_file_in_config,
)

desktop_file = i18n.merge_file(
        input: desktop_file_in,
       output: '{{app_id}}.desktop',
         type: 'desktop',
       po_dir: '../po',
      install: true,
  install_dir: get_option('datadir') / 'applications'
)

desktop_utils = find_program('desktop-file-validate', required: false)
if desktop_utils.found()
  test('Validate desktop file', desktop_utils, args: [desktop_file])
endif

appstream_file_in_config = configuration_data()
appstream_file_in_config.set('app_id', app_id)
appstream_file_in = configure_file(
          input: '{{name}}.metainfo.xml.in',
         output: '@0@.metainfo.xml.in'.format(app_id),
  configuration: appstream_file_in_config,
)

appstream_file = i18n.merge_file(
        input: appstream_file_in,
       output: '@0@.metainfo.xml'.format(app_id),
       po_dir: '../po',
      install: true,
  install_dir: get_option('datadir') / 'metainfo'
)

appstreamcli = find_program('appstreamcli', required: false, disabler: true)
test('Validate appstream file', appstreamcli,
     args: ['validate', '--no-net', '--explain', appstream_file])

install_data('{{name}}.gschema.xml',
       rename: '@0@.gschema.xml'.format(app_id),
  install_dir: get_option('datadir') / 'glib-2.0' / 'schemas'
)

compile_schemas = find_program('glib-compile-schemas', required: false, disabler: true)
test('Validate schema file',
     compile_schemas,
     args: ['--strict', '--dry-run', meson.current_source_dir()])


service_conf = configuration_data()
service_conf.set('bindir', get_option('prefix') / get_option('bindir'))
service_conf.set('app_id', app_id)
configure_file(
          input: '{{name}}.service.in',
         output: '@0@.service'.format(app_id),
  configuration: service_conf,
    install_dir: get_option('datadir') / 'dbus-1' / 'services'
)

subdir('icons')
```

```{{dirname}}/data/{{name}}.gschema.xml
<?xml version="1.0" encoding="UTF-8"?>
<schemalist gettext-domain="{{name}}">
  <schema id="{{app_id}}" path="/{{gsettings_path}}/">
  </schema>
</schemalist>
```

```{{dirname}}/data/icons/meson.build
scalable_dir = 'hicolor' / 'scalable' / 'apps'
install_data(
  '@0@.svg'.format(app_id),
  install_dir: get_option('datadir') / 'icons' / scalable_dir
)

symbolic_dir = 'hicolor' / 'symbolic' / 'apps'
install_data(
  '@0@-symbolic.svg'.format(app_id),
  install_dir: get_option('datadir') / 'icons' / symbolic_dir
)
```

```{{dirname}}/data/icons/{{app_id}}.svg
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 0 16 16" width="16px"><g fill="#222222"><path d="m 5.207031 1.292969 c -0.390625 -0.390625 -1.023437 -0.390625 -1.414062 0 l -2.5 2.5 c -0.390625 0.390625 -0.390625 1.023437 0 1.414062 l 2.5 2.5 c 0.390625 0.390625 1.023437 0.390625 1.414062 0 l 2.496094 -2.5 c 0.390625 -0.390625 0.390625 -1.023437 0 -1.414062 z m 0 0"/><path d="m 10 12 c 0 1.65625 -1.34375 3 -3 3 c -1.660156 0 -3 -1.34375 -3 -3 s 1.339844 -3 3 -3 c 1.65625 0 3 1.34375 3 3 z m 0 0"/><path d="m 11.945312 2.003906 c -0.339843 0.015625 -0.644531 0.203125 -0.8125 0.496094 l -2.320312 4 c -0.386719 0.664062 0.09375 1.5 0.863281 1.5 h 4.644531 c 0.769532 0 1.25 -0.835938 0.863282 -1.5 l -2.320313 -4 c -0.1875 -0.328125 -0.542969 -0.519531 -0.917969 -0.496094 z m 0 0"/></g></svg>
```

```{{dirname}}/data/icons/{{app_id}}-symbolic.svg
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 0 16 16" width="16px"><g fill="#222222"><path d="m 5.207031 1.292969 c -0.390625 -0.390625 -1.023437 -0.390625 -1.414062 0 l -2.5 2.5 c -0.390625 0.390625 -0.390625 1.023437 0 1.414062 l 2.5 2.5 c 0.390625 0.390625 1.023437 0.390625 1.414062 0 l 2.496094 -2.5 c 0.390625 -0.390625 0.390625 -1.023437 0 -1.414062 z m 0 0"/><path d="m 10 12 c 0 1.65625 -1.34375 3 -3 3 c -1.660156 0 -3 -1.34375 -3 -3 s 1.339844 -3 3 -3 c 1.65625 0 3 1.34375 3 3 z m 0 0"/><path d="m 11.945312 2.003906 c -0.339843 0.015625 -0.644531 0.203125 -0.8125 0.496094 l -2.320312 4 c -0.386719 0.664062 0.09375 1.5 0.863281 1.5 h 4.644531 c 0.769532 0 1.25 -0.835938 0.863282 -1.5 l -2.320313 -4 c -0.1875 -0.328125 -0.542969 -0.519531 -0.917969 -0.496094 z m 0 0"/></g></svg>
```

```{{dirname}}/data/{{name}}.desktop.in.in
[Desktop Entry]
Name={{dirname}}
Exec={{name}}
Icon=@app_id@
Terminal=false
Type=Application
Categories=Utility;
Keywords=GTK;
StartupNotify=true
DBusActivatable=true
```

```{{dirname}}/data/{{name}}.metainfo.xml.in
<component type="desktop-application">
  <id>{{app_id}}</id>
  <metadata_license>CC0-1.0</metadata_license>
  <project_license>{{license.id}}</project_license>

  <name>{{dirname}}</name>
  <summary>Few word description</summary>
  <description>
    <p>No description</p>
  </description>

  <developer id="tld.vendor">
    <name>{{author}}</name>
  </developer>

  <url type="homepage">https://example.org/</url>
  <url type="vcs-browser">https://example.org/repository</url>
  <url type="bugtracker">https://example.org/issues</url>
  <url type="translate">https://example.org/translate</url>
  <url type="faq">https://example.org/faq</url>
  <url type="help">https://example.org/help</url>
  <url type="donation">https://example.org/donate</url>
  <url type="contact">https://example.org/contact</url>
  <url type="contribute">https://example.org/contribute</url>

  <translation type="gettext">{{name}}</translation>

  <launchable type="desktop-id">@app_id@.desktop</launchable>

</component>
```

```{{dirname}}/data/{{name}}.service.in
[D-BUS Service]
Name=@app_id@
Exec=@bindir@/{{name}} --gapplication-service
```

```{{dirname}}/{{app_id}}.Devel.json
{
    "id" : "{{app_id}}",
    "command" : "{{name}}",
    "runtime" : "org.gnome.Platform",
    "runtime-version" : "master",
    "sdk" : "org.gnome.Sdk",
{{if language.id == "rust"}}
    "sdk-extensions" : [
        "org.freedesktop.Sdk.Extension.rust-stable"
    ],
{{else if language.id == "vala"}}
    "sdk-extensions" : [
        "org.freedesktop.Sdk.Extension.vala-nightly"
    ],
{{else if language.id == "javascript"}}
    "sdk-extensions" : [
        "org.freedesktop.Sdk.Extension.node20",
        "org.freedesktop.Sdk.Extension.typescript"
    ],
{{end}}
    "finish-args" : [
        "--device=dri",
        "--share=ipc",
        "--socket=fallback-x11",
        "--socket=wayland"
    ],
{{if language.id == "rust"}}
    "build-options" : {
        "append-path" : "/usr/lib/sdk/rust-stable/bin",
        "build-args" : [
            "--share=network"
        ],
        "env" : {
            "RUST_BACKTRACE" : "1",
            "RUST_LOG" : "{{name}}=debug"
        }
    },
{{else if language.id == "vala"}}
    "build-options" : {
        "append-path" : "/usr/lib/sdk/vala/bin",
        "prepend-ld-library-path" : "/usr/lib/sdk/vala/lib"
    },
{{else if language.id == "javascript"}}
    "build-options" : {
        "append-path" : "/usr/lib/sdk/typescript/bin:/usr/lib/sdk/node20/bin"
    },
{{end}}
    "cleanup" : [
        "/include",
        "/lib/pkgconfig",
        "/man",
        "/share/doc",
        "/share/gtk-doc",
        "/share/man",
        "/share/pkgconfig",
        "/share/vala",
        "*.la",
        "*.a"
    ],
    "modules" : [
        {
            "name" : "{{dirname}}",
            "builddir" : true,
            "buildsystem" : "meson",
            "sources" : [
                {
                    "type" : "dir",
                    "path" : "."
                }
            ]
        }
    ]
}
```

```{{dirname}}/.foundry/.gitignore
tmp/
user/
cache/
```

```{{dirname}}/.foundry/project/settings.keyfile
[project]
build-system='meson'
default-license='{{license.id}}'
```

if git
{{dirname}}/.git/objects/
{{dirname}}/.git/refs/heads/

```{{dirname}}/.git/HEAD
ref: refs/heads/main
```
end
